* NTS hackathon

** Intro

sunday
14:00 (20:00) presentations

16:00 (22:00) hackathon ends.

** Todo

- [ ] Create github project? wiki?
- [X] Is it possible to use beevik/ntp as a server? Just have a UDP
  Listener and answer with Response?
- [ ] Establish TLS 1.3 with mint

github.com/IETF-Hackathon/ietf102-project-presentations

Send your github ID to Charles Eckel.

twitter: #ietfhackathon

** Streaming?

Ingen meetecho-länk?

http://www.meetecho.com/ietf102/hackathon/

https://trac.ietf.org/trac/ietf/meeting/wiki/102hackathon

** Oblivious DNS

https://odns.cs.princeton.edu/

https://tools.ietf.org/html/draft-annee-dprive-oblivious-dns-00
https://tools.ietf.org/wg/dprive/

Has an implementation in Go. Private github.

Gå på den istället?

** Standards

[[https://tools.ietf.org/html/rfc5905][RFC 5905]] - Network Time Protocol Version 4: Protocol and Algorithms Specification

[[https://tools.ietf.org/html/rfc5905#section-7.4][RFC 5905]] - section 7.4 - The Kiss-o'-Death Packet

[[https://tools.ietf.org/html/rfc4330][RFC 4330]] - Simple Network Time Protocol (SNTP) Version 4 for IPv4, IPv6 and OSI

[[https://tools.ietf.org/html/rfc7822][RFC 7822]] - Network Time Protocol Version 4 (NTPv4) Extension Fields

[[https://tools.ietf.org/html/rfc5077][RFC 5077]] Transport Layer Security
(TLS) Session Resumption without Server-Side State
"The role of cookies in NTS is closely analogous to that of session cookies
in TLS."

[[https://tools.ietf.org/html/rfc5705][RFC 5705]] - Keying Material Exporters for Transport Layer Security (TLS)

[[https://tools.ietf.org/html/rfc7507][RFC 7507]] - TLS Fallback Signaling
Cipher Suite Value (SCSV) for Preventing Protocol Downgrade Attacks

[[https://tools.ietf.org/html/rfc7301][RFC 7301]] - Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension

[[https://tools.ietf.org/html/rfc5116][RFC 5116]] - An Interface and Algorithms for Authenticated Encryption

[[https://tools.ietf.org/html/rfc5297][RFC 5297]] Synthetic Initialization
Vector (SIV) Authenticated Encryption Using the Advanced Encryption Standard
(AES)

[[https://tools.ietf.org/html/rfc4291#section-2.5.5.2][RFC 4291]] - section 2.5.5.2 - IPv4-Mapped IPv6 Address

[[https://tools.ietf.org/html/rfc5869][RFC 5869]] - HMAC-based
Extract-and-Expand Key Derivation Function (HKDF)

** Drafts

Champion(s)
Karen O'Donoghue <odonoghue at isoc.org>
Dieter Sibold <dieter.sibold at ptb.de>
Project(s)
Implementation of ​​https://datatracker.ietf.org/doc/html/draft-ietf-ntp-using-nts-for-ntp
Interoperability tests of different implementations of this draft
NTS Implementation(s):
​https://gitlab.com/MLanger/nts
​https://github.com/dfoxfranke/nts-hackathon

https://datatracker.ietf.org/doc/html/draft-ietf-ntp-using-nts-for-ntp

Comments...

NTS Key Establishment protocol. Separate protocol for keys?

But there was a different proposal?

omni: s/from sent from/when sent from/

https://tools.ietf.org/wg/ntp/

[[https://datatracker.ietf.org/doc/draft-ietf-tls-tls13/][draft-ietf-tls-tls13]]
The Transport Layer Security (TLS) Protocol Version 1.3

*** Dansarie spec
https://datatracker.ietf.org/doc/draft-dansarie-nts/?include_text=1

Men den listas inte under arbetsgruppen alls? Vad är skillnaden?

#+BEGIN_QUOTE
NTS is structured as a suite of two loosely coupled sub-protocols: the
NTS Key Establishment Protocol (NTS-KE) and the NTS Extension Fields
for NTPv4. NTS-KE handles NTS service authentication, initial
handshaking, and key extraction over TLS. Encryption and
authentication during NTP time synchronization is performed through
the NTS Extension Fields in otherwise standard NTP packets. Except for
during the initial NTS-KE process, all state required by the protocol
is held by the client in opaque cookies.
#+END_QUOTE

So NTS-KE is just TLS over TCP first? Then send stuff over NTP as
usual but with extra data?

#+BEGIN_QUOTE
This memo specifies NTS exclusively for the client-server mode of NTP.
#+END_QUOTE

Ah! That's the difference from the other proposal?

*** SNTP

https://tools.ietf.org/html/rfc5905#section-14

#+BEGIN_QUOTE
SNTP is intended for primary servers equipped with a single reference
clock, as well as for clients with a single upstream server and no
dependent clients.
#+END_QUOTE

Eller openntpd ?

*** NTS-KE

RFC5705 TLS key export. How does it work? Can we get this
automagically?

#+BEGIN_QUOTE
A number of protocols wish to leverage Transport Layer Security (TLS)
to perform key establishment but then use some of the keying material
for their own purposes. This document describes a general mechanism
for allowing that.
#+END_QUOTE

https://github.com/levigross/gboringssltls/blob/master/conn.go

seems to supports it. Is it a go wrapper around boringssl?

gnutls supports it.
https://www.gnutls.org/manual/html_node/Deriving-keys-for-other-applications_002fprotocols.html

#define MYLABEL "EXPORTER-My-protocol-name"
#define MYCONTEXT "my-protocol's-1st-session"

char out[32];
rc = gnutls_prf_rfc5705 (session, sizeof(MYLABEL)-1, MYLABEL,
                         sizeof(MYCONTEXT)-1, MYCONTEXT, 32, out);

or just a small C program?

mint - a clean tls 1.3 implementation with this function:
https://godoc.org/github.com/bifurcation/mint#Conn.ComputeExporter

Maybe?

python bindings?
https://github.com/AGProjects/python-gnutls

Must be TLS 1.3. Do we have that in golang?

https://golang.org/pkg/crypto/tls/ is 1.2.

Uses Application-Layer Protocol Negotiation Extension [RFC7301].

Ragel for the binary protocol?

But Ragel doesn't support Go anymore. Gah!

** Implementations

https://github.com/beevik/ntp
https://godoc.org/github.com/beevik/ntp

https://github.com/bt51/ntpclient

https://medium.com/learning-the-go-programming-language/lets-make-an-ntp-client-in-go-287c4b9a969f
https://github.com/vladimirvivien/go-ntp-client

https://github.com/mengzhuo/gontpd
http://gontpd.org

  uses beevik/ntp for client.

** Testing

18:00 <Martin___> well...  I currently have 2 servers running
18:00 <Martin___> this one: nts1-e.ostfalia.de / 141.41.241.68
18:01 <Martin___> this server runs 24/7
18:01 <Martin___> and this one: nts2-e.ostfalia.de / 141.41.241.69
18:02 <jpo_> and what is port "[[TBD1]]" in your case?
18:02 <Martin___> the second one runs only today (on my notebook
                  for more traffic analysis)
18:02 <Martin___> TLS is 443 TCP
18:04 <Martin___> here is the certificate for my server:
                  http://nts1-e.ostfalia.de/homePi/CLIENT/rootCaBundle.pem

(omni) sha256: 97290c72ff74ed6bacfd4b88e374fdd78d6e8489e15a9b1471c93a6ad760534a

22:14 <Martin___> nts1-e.ostfalia.de / 141.41.241.68 --> TLS 1.2
22:15 <Martin___> nts2-e.ostfalia.de / 141.41.241.69  --> TLS 1.2
                  and TLS1.3

** NTS-KE

github.com/lunixbochs/struc

#+BEGIN_EXAMPLE
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |C|         Record Type         |          Body Length          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   .                                                               .
   .                           Record Body                         .
   .                                                               .
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#+END_EXAMPLE

Client:
  - NTS next protocol
  - aead algorithm 
  - ntp server 
  - end of message

Server:
  - nts next protocol
  - aead
  - ntp server
  - new cookie
   ...
  - end of message

- NTS Next protocol request 4.1.2

  C = set bit

  record type = 1 NTS Next protocol 

  body 16-bit unsigned integers in network byte order

  16 bits of 0

  MC: in 4.1.5 it is mentioned that this is 0. Should be mentioned
  earlier, under 4.1.2.

- 4.1.5 aead

  - C : may be set.
  - record type 4.
  - 15 unsigned 16-bit integers 

what would the client like to use?
 server: what I choose to use.

Must support AEAD_EASe_SIV_CMAC_256: numeric value 15.

- 4.1.7 ntp server

should be sent by the server as a reply

   - C: 1, should be set.
   - record type 6
   - sequence of v4 or v6 addresses, 16 octets. v4 mapped to
     ::ffff:192.168.0.1

- end of message

  - c: 1
  - record type 0
  - empty body

- Cookie

  - c: 0
  - record type 5
  - size?

servers should send at least one cookie record.

bytes.Buffer

  Write()

** TLS too old

Tried running mint against

  https://tls13.crypto.mozilla.org/

About mint:

22:30 <Martin___> it supports 1.3 (draft 22)
22:30 <Martin___> openssl supports draft 26-28
22:31 <Martin___> but tls 1.2 should work

Try using the OpenSSL bindings instead?

https://github.com/spacemonkeygo/openssl
